def remote = [:]
         remote.name = 'ansible'
         remote.host = '172.31.49.252'
         remote.user = 'centos'
         remote.password = 'Rnstech@123'
         remote.allowAnyHosts = true
def kops = [:]
         kops.name = 'kops'
         kops.host = '172.31.62.68'
         kops.user = 'centos'
         kops.password = 'Rnstech@123'
         kops.allowAnyHosts = true
pipeline {
    agent { label 'BuildServer'}

    tools {
        // Install the Maven version configured as "Maven" and add it to the path.
        maven "Maven"
    }

    stages {
        stage('Prepare-Workspace') {
            steps {
                // Get some code from a GitHub repository
      		  git credentialsId: 'Github', url: 'https://github.com/gaddam146/Maven-Java-Project.git'
		stash 'Source'
            }
            
        }
        stage('Tools-Setup') {
            steps {
		    //echo "Tools Setup"
		    //sshCommand remote: remote, command: "hostname"
		    //sshCommand remote: remote, command: "date"
		    //sshCommand remote: remote, command: "ansible all -m ping"
		    //sshCommand remote: remote, command: "ansible BuildServer -m ping"
                  sshCommand remote: remote, command: 'cd Maven-Java-Project; git pull'
                  //sshCommand remote: remote, command: 'cd Maven-Java-Project; ansible-playbook tools/sonarqube/sonar-install.yaml'
                  sshCommand remote: remote, command: 'cd Maven-Java-Project; ansible-playbook tools/docker/docker-install.yml'  
		
		//K8s Setup
		sshCommand remote: kops, command: "hostname"
		sshCommand remote: remote, command: "date"
                sshCommand remote: kops, command: "cd Maven-Java-Project; git pull"
	        sshCommand remote: kops, command: "kubectl apply -f Maven-Java-Project/k8s-code/staging/namespace/staging-ns.yml"
	        sshCommand remote: kops, command: "kubectl apply -f Maven-Java-Project/k8s-code/prod/namespace/prod-ns.yml"
		}
		}
	stage ('SonarQube Analaysis'){
	steps{
	echo "sonar scanner"
	//sh "mvn clean compile"
	//withSonarQubeEnv('sonar-7'){
	//sh "mvn sonar:sonar"
	//}
	}
	}
	stage('Unit Test Cases'){
	steps{
	sh "mvn clean test"
	}
	post{
	success {
	junit 'target/surefire-reports/*.xml'
	}
	}
	}
	stage('Build Code'){
	steps{
	//unstash 'source'
	sh "mvn clean package"
	}
	post{
	success{
	archiveArtifacts artifacts: '**/*.war', followSymlinks: false
	}
	}
        }
       stage('Build Docker Image'){
       steps{
       sh 'docker build -t gaddam146/webapp .'
       }
       }
       stage('Publish Docker Image'){
       steps{
       withCredentials([usernamePassword(credentialsId: 'Dockerhub', passwordVariable: 'dockerPassword', usernameVariable: 'dockerUser')]) {
    		    sh "docker login -u ${dockerUser} -p ${dockerPassword}"
		    }
	sh " docker push gaddam146/webapp"
		   
       }
       }
       stage('Deploy to staging'){
       steps{
       //Deploy to K8s cluster
       echo "Deploy to staging server"
              sshCommand remote: kops, command: "cd Maven-Java-Project; git pull"
	      sshCommand remote: kops, command: "kubectl delete -f Maven-Java-Project/k8s-code/staging/app/deploy-webapp.yml"
	      sshCommand remote: kops, command: "kubectl apply -f Maven-Java-Project/k8s-code/staging/app/."
       }
       }
       stage('Integration Tests'){
       steps{
       echo "Run Integration test cases"
       //unstash 'source'
       sh "mvn clean verify"
       }
       }
       stage('Approval'){
       steps{
       echo "Approval State"
       timeout(time: 7, unit: 'DAYS') {
       input message: 'Do you want to deploy?', submitter: 'admin'
       }
       }
       }
       }
       }
